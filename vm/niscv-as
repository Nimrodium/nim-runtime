#!/bin/python
# simple nimcode assembler

# just a prototyping file for when i rewrite the assembler in rust, but it does fully work.
# and i could just leave it like this honestly.

import re
import os
import enum
import sys
from typing_extensions import NoReturn
U8_MAX = 255
U16_MAX = 65_535
U32_MAX = 4_294_967_295
U64_MAX = 18_446_744_073_709_551_615

REGISTER_BYTES = 1
OPCODE_BYTES = 1
ADDRESS_BYTES = 8
MMIO_ADDRESS_SPACE = 42

LABEL = "!"
LITERAL = "$"
ASSEMBLY_POINTER = "."
# BASE_RAM_POINTER = "@"

SEPERATOR = ";"
COMMENT = "//"

OPEN_SECTION = "{"
CLOSE_SECTION = "}"

RESET = "\033[0m"
GREEN = "\033[32m"
RED = "\033[31m"
YELLOW = "\033[33m"

class Tp(enum.Enum):
    Reg = enum.auto(),
    Addr = enum.auto(),
    Imm = enum.auto(),
    Op = enum.auto(),

opcode_table : dict[str,tuple[int,int,list]] = {
    "nop":(0x00,0,[]),
    "mov":(0x01,2,[Tp.Reg,Tp.Reg]),
    "movim":(0x02,2,[Tp.Reg,Tp.Imm]),
    "load":(0x03,3,[Tp.Reg,Tp.Reg,Tp.Addr]),
    "store":(0x04,3,[Tp.Addr,Tp.Reg,Tp.Reg]),

    "add":(0x05,3,[Tp.Reg,Tp.Reg,Tp.Reg]),
    "sub":(0x06,3,[Tp.Reg,Tp.Reg,Tp.Reg]),
    "mult":(0x07,3,[Tp.Reg,Tp.Reg,Tp.Reg]),
    "div":(0x08,4,[Tp.Reg,Tp.Reg,Tp.Reg,Tp.Reg]),

    "or":(0x09,3,[Tp.Reg,Tp.Reg,Tp.Reg]),
    "xor":(0x0a,3,[Tp.Reg,Tp.Reg,Tp.Reg]),
    "and":(0x0b,3,[Tp.Reg,Tp.Reg,Tp.Reg]),
    "not":(0x0c,2,[Tp.Reg,Tp.Reg]),
    "shl":(0x0d,3,[Tp.Reg,Tp.Reg,Tp.Reg]),
    "shr":(0x0e,3,[Tp.Reg,Tp.Reg,Tp.Reg]),
    "rotl":(0x0f,3,[Tp.Reg,Tp.Reg,Tp.Reg]),
    "rotr":(0x10,3,[Tp.Reg,Tp.Reg,Tp.Reg]),
    "neg":(0x11,2,[Tp.Reg,Tp.Reg]),

    "jmp":(0x12,1,[Tp.Addr]),
    "jifz":(0x13,2,[Tp.Reg,Tp.Addr]),
    "jifnz":(0x14,2,[Tp.Reg,Tp.Addr]),

    "pr":(0x15,1,[Tp.Reg]),
}

register_table = {
    "r1":1,
    "r2":2,
    "r3":3,
    "r4":4,
    "r5":5,
    "r6":6,
    "r7":7,
    "r8":8,
    "r9":9,
    "r10":10,
    "r11":11,
    "r12":12,
    "r13":13,
    "r14":14,
    "r15":15,
    "r16":16,
    "r17":17,
    "r18":18,
    "r19":19,
    "r20":20,
    "pc":21,
    "sp":22,
    "o1":23,
    "o2":24,
    "o3":25,
    "o4":26,
    "o5":27,
}

def handle_warning(type:str,error:str):
    print(f"{YELLOW} Assembly {type.capitalize()} Warning :: {RESET} {error}")

def handle_error(type:str,error:str,warning:bool=False) -> NoReturn :
    print(f"{RED} Assembly {type.capitalize()} Error :: {YELLOW} {error}")
    exit(1)

def parse_expression(expr:list[str|int]) -> int:
    # detokenize
    literal_expr = ""
    for token in expr:
        literal_expr+=str(token)

    literal_expr = re.sub(r'(\d)(\()', r'\1*\2', literal_expr) # i did NOT make this, NO credit to ME
    # print(literal_expr)
    try:
        result = eval(literal_expr)
    except SyntaxError as e:
        handle_error("Syntax",f"{literal_expr} failed to evaluate :: {e} ::")
    return result

def tokenize_expression(statement:str,labels:dict[str,int]) -> list[str|int]:
    # input exm : "@+1-2"
    # print(statement)
    state = 0
    intermediate : list[str|int] = []
    operations = ['+','-','*','/','%',' ','(',')']

    building_int = False
    integer_buffer : str = ""

    building_label = False
    label_buffer : str = ""
    for char in statement:
        if char.isdigit() and not building_label:
            # print(f"found digit : {char}")
            building_int = True
            integer_buffer+=char
        elif char.startswith(LABEL) and not building_int:
            building_label = True
            label_buffer+=char

        elif char in operations:
            if building_int:
                building_int = False
                intermediate.append(int(integer_buffer))
                integer_buffer = ""

            elif building_label:
                building_label = False
                intermediate.append(label_buffer)
                label_buffer = ""
            if char != " ":
                intermediate.append(char)
        elif building_label and not building_int:
                    label_buffer+=char
        elif char == ASSEMBLY_POINTER:
            intermediate.append(char)
        else:
            handle_error(f"Syntax",f"unexpected character [ {char} ] in {statement}")

    if integer_buffer:
        intermediate.append(int(integer_buffer))
    if label_buffer:
        intermediate.append(label_buffer)
    print(intermediate)
    delabeled_intermediate : list[int|str] = []
    for element in intermediate:
        if isinstance(element,str):
            if element.startswith(LABEL) or element == ASSEMBLY_POINTER:
                if element in labels.keys():
                    new = labels[element]
                else:
                    handle_error("UnknownLabel",f"{element} is not known (yet)")
            else:
                new = element
        elif isinstance(element,int):
            new = element
        else:
            handle_error("Internal",f"??? what is {element} and why is he here")
        delabeled_intermediate.append(new)
    print(delabeled_intermediate)

    return delabeled_intermediate

def evaluate_literal_definition(expr:str,labels:dict[str,int]) -> int:
    if not expr.startswith(LITERAL):
        handle_error("Syntax",f"expression {expr} is not a valid expression (must start with {LITERAL})")

    tokenized = tokenize_expression(expr[1:],labels)
    result : int = parse_expression(tokenized)
    return result

def immediate_byte_size(value:int) -> int:
    if value > U64_MAX: # cannot be fit
        raise ValueError(f"immediate {value} over u64 limit {U64_MAX}")
    if value < 0:
        raise ValueError(f"immediate {value} is negative which is not supported in the current nimcode implementation")
    if value > U32_MAX:
        return 8
    elif value > U16_MAX:
        return 4
    elif value > U8_MAX:
        return 2
    else:
        return 1

def clean_source(source:str) -> list[str]:
    source_lines = source.strip().splitlines()
    cleaned_source : list[str] = []
    for line in source_lines:
        if not line:
            #empty line
            continue
        line_no_comments = line.split(COMMENT)[0].strip() # takes all chars before //
        if not line_no_comments:
            # line was entirely comment
            continue
        instructions = line_no_comments.split(SEPERATOR)
        cleaned_instructions : list[str] = []
        for line in instructions:
            clean_line = line.strip()
            if line:
               cleaned_instructions.append(clean_line)

        # print(cleaned_instructions)
        cleaned_source.extend(cleaned_instructions)
    return cleaned_source

def is_immediate(operand: str) -> bool:
    return operand.startswith(LITERAL) and operand[1:].isdigit()
# list[list[tuple[int,tuple[int]]]]
#
def calc_instruction_size(instruction:list[tuple[int|str,Tp,int]]) -> int:
    size = 0
    # print(f"instruction {instruction}")
    for element in instruction:
        size+=element[2]
    return size

# returns label -> program address dictionary for the program section
def resolve_program_labels(source:list[str],intermediate:list[list[tuple[int|str,Tp,int]]]) -> dict[str,int]:
    labels : dict[str,int] = {}
    head = MMIO_ADDRESS_SPACE
    i = 0
    for line in source:

        if line.startswith(LABEL):
            # add label entry
            label_name = line.lower().strip().partition(" ")[0]
            # print(f"{label_name} pointing to pc:{head}")
            labels.update({label_name:head})
        else:
            # advance head
            # print(f"line [ {line} ] at pc:{head}")
            head+= calc_instruction_size(intermediate[i])
            i+=1
    return labels

#
def write_ram(ram:list[int],new:list[int]) -> list[int]:

    return ram

# reads data section and returns data byte sequence and label table
# ram_base == last address of program + 1
def parse_data_section(source:list[str]) -> tuple[bytes,dict[str,int]]:
    labels : dict[str,int] = {}
    ram : list[int] = []
    for line in source:
        asm_ptr = len(ram)
        labels.update({ASSEMBLY_POINTER:asm_ptr})
        # print(f"data : {line}")
        label,_,rest = line.partition(" ")
        command,_,data = rest.partition(" ")
        # print(f"label: {label}\ncommand: {command}")
        match command:
            case "equ":
                literal = data.strip()
                entry = {label:evaluate_literal_definition(literal,labels)}
                # print(entry)
                labels.update(entry)
                # if not literal.isdigit():
                #     handle_error("Syntax",f"{literal} is not a valid literal, which is expected by {command}")
                # labels.update({label:int(literal)})
            case _:
                handle_error("Syntax",f"unrecognized data definition command [ {command} ]")


    return (bytes([0]),labels)

def merge_program_and_data_labels(program_labels:dict[str,int],data_labels:dict[str,tuple[int,bool]],program_length) -> dict[str,int]:
    # data labels are relative to start of data
    # program labels are already absolute (accounts for MMIO address space)
    # just add the length of program to all and then merge

    # account for end of exec marker and move 1 so that data0 is not in program space
    ram_base = program_length + OPCODE_BYTES + 1
    print(f"ram base {ram_base}")
    for label_name,label_value in data_labels.items():
        if label_name in program_labels:
            handle_error("LabelAlreadyDefined",f"program and data label collision {label_name} already in program labels")
        if label_value[1]: # apply offset flag
            program_labels.update({label_name:label_value[0]+ram_base})
        else:
            program_labels.update({label_name:label_value[0]})
    return program_labels

def assemble_program(source:list[str]) -> list[list[tuple[int|str,Tp,int]]]:
    program : list[list[tuple[int|str,Tp,int]]] = []
    # program_labels : dict[str,int] =


    for raw_instruction in source:
        print(raw_instruction)
        if raw_instruction.startswith(LABEL):
            # skip labels
            continue
        raw_instruction = raw_instruction.lower().strip().split(" ") # "mov r1,r2" -> ["mov","r1,r2"]
        operation_str : str = raw_instruction[0] # "mov"


        if operation_str not in opcode_table: # resolve operation
            handle_error("UnknownOperation",f"{operation_str}")

        operation_code,fields,types = opcode_table[operation_str]

        if fields > 0:
            operands_str : list[str] = raw_instruction[1].split(",") # ["r1","r2"]
        else:
            operands_str = []
        # print(f"operation: {operation_str}\noperands: {operands_str}")

        if len(operands_str) != fields:
            handle_error("OperationSyntax",f"incorrect amount of operands :: {operation_str} expects {fields} while only {len(operands_str)} were provided")
        instruction : list[tuple[int|str,Tp,int]] = [(operation_code,Tp.Op,OPCODE_BYTES)]
        for i,operand in enumerate(operands_str):

            data_type : Tp = types[i]
            match data_type:
                case Tp.Reg:
                    if operand not in register_table.keys():
                        handle_error("OperationSyntax",f"{operand} not a valid register which is expected by {operation_str} operation at position {i+5}")
                    resolved_register = register_table[operand]
                    instruction.append((resolved_register,Tp.Reg,REGISTER_BYTES))

                case Tp.Addr:
                    # print(f"found address label {operand} during assembly")
                    instruction.append((operand,Tp.Addr,ADDRESS_BYTES))

                case Tp.Imm:
                    if operand[1:].isdigit() and operand.startswith(LITERAL):
                        # print("literal")
                        immediate = int(operand[1:])
                        instruction.append((immediate,Tp.Imm,immediate_byte_size(immediate)+1))

                    elif operand.startswith(LABEL):
                        # print("palceholder label")
                        instruction.append((operand,Tp.Imm,0xDEADBEEF))
                    else:
                        handle_error("OperationSyntax",f"{operand} not a valid immediate which is expected by {operation_str} operation at position {i}")

                case Tp.Op:
                    handle_error("InternalSource","definition format error")

        # print(f"instruction : {instruction}")
        program.append(instruction)
    return program

def calculate_program_byte_length(intermediate_program:list[list[tuple[int|str,Tp,int]]]) -> int:
    length = MMIO_ADDRESS_SPACE

    for instruction in intermediate_program:
        length+=calc_instruction_size(instruction)
        # print(length)
    return length

def resolve_immediates(labels:dict[str,int],intermediate_program:list[list[tuple[str|int,Tp,int]]]) -> list[list[tuple[str|int,Tp,int]]]:
    resolved_intermediate : list[list[tuple[int|str,Tp,int]]] = []
    for instruction in intermediate_program:
        resolved_instruction : list[tuple[int|str,Tp,int]] = []
        for object,data_type,size in instruction:

            if isinstance(object,str) and data_type == Tp.Imm: # if labeled immediate

                if object in labels.keys():
                    # print(f"{RED}imm {object} is {labels[object]}{RESET}")
                    object = labels[object]
                    size = immediate_byte_size(object)
                else:
                    handle_error("UnknownLabel",f"{object} was never defined")
            resolved_instruction.append((object,data_type,size))
            # print(f"{RED}{resolved_instruction}{RESET}")
        resolved_intermediate.append(resolved_instruction)
    return resolved_intermediate

def resolve_program_addresses(program_labels:dict[str,int],intermediate_program:list[list[tuple[str|int,Tp,int]]]) -> list[list[tuple[str|int,Tp,int]]]:
    # first collect program labels
    # then insert
    resolved_intermediate : list[list[tuple[int|str,Tp,int]]] = []
    for instruction in intermediate_program:
        resolved_instruction : list[tuple[int|str,Tp,int]] = []
        for object,data_type,size in instruction:
            if isinstance(object,str) and data_type == Tp.Addr: # labeled address
                if object.isdigit():
                    object = int(object)
                    size = immediate_byte_size(object)+1
                elif object in program_labels.keys():
                    object = program_labels[object]
                else:
                    handle_warning("UnknownLabel",f"{object} hasn't been defined")
            # assert isinstance(object,int)
            resolved_instruction.append((object,data_type,size))
        resolved_intermediate.append(resolved_instruction)
    return resolved_intermediate

def resolve_ram_addresses(labels:dict[str,int],intermediate_program:list[list[tuple[str|int,Tp,int]]],ram_base:int) -> list[list[tuple[int,Tp,int]]]:
    resolved_intermediate : list[list[tuple[int,Tp,int]]] = []
    print(labels)
    for instruction in intermediate_program:
        resolved_instruction : list[tuple[int,Tp,int]] = []
        for object,data_type,size in instruction:
            if isinstance(object,str) and data_type == Tp.Addr: # labeled address
                if object in labels.keys():
                    print(f"{object} is {labels[object]+ram_base}")
                    object = labels[object] + ram_base
                else:
                    handle_error("UnknownLabel",f"{object} was never defined")
            print(object)
            assert isinstance(object,int)
            resolved_instruction.append((object,data_type,size))
        resolved_intermediate.append(resolved_instruction)
    return resolved_intermediate

def resolve_labels(program_source:list[str],labels:dict[str,int],intermediate_program:list[list[tuple[str|int,Tp,int]]]) -> list[list[tuple[int,Tp,int]]]:

    resolved_immediate_program = resolve_immediates(labels,intermediate_program)
    ram_base = calculate_program_byte_length(resolved_immediate_program)
    ram_base += OPCODE_BYTES # to account for end of exec opcode

    program_labels : dict[str,int] = resolve_program_labels(program_source,resolved_immediate_program)
    resolved_program_addresses_program = resolve_program_addresses(program_labels,resolved_immediate_program)

    resolved_all = resolve_ram_addresses(labels,resolved_program_addresses_program,ram_base)
    return resolved_all


def expand_bytes(intermediate_program:list[list[tuple[int,Tp,int]]]) -> bytes:
    resolved_program_bytes : list[int] = []
    for instruction in intermediate_program:
        # First element is opcode, second is type, third is operands
        for object,data_type,_ in instruction:
            expand : int = 0
            match data_type:
                case Tp.Op:
                    # print(f"{object} is opcode expanding to {OPCODE_BYTES}")
                    expand = OPCODE_BYTES
                case Tp.Reg:
                    # print(f"{object} is register expanding to {REGISTER_BYTES}")
                    expand = REGISTER_BYTES
                case Tp.Addr:
                    # print(f"{object} is address expanding to {ADDRESS_BYTES}")
                    expand = ADDRESS_BYTES
                case Tp.Imm:
                    size = immediate_byte_size(object)
                    # print(f"{object} is immediate, expanding to {size}")
                    resolved_program_bytes.append(size) # add size byte before immediate
                    expand = size
            try:
                expanded = object.to_bytes(expand,"little")
            except AttributeError:
                handle_error("LabelResolution",f"{object} never dereferenced")

            # resolved_program_bytes.append(expanded)
            resolved_program_bytes.extend(list(expanded))
    # add end of execution marker with dynamic size based on opcode size
    end_of_exec = []
    for byte in range(OPCODE_BYTES):
        end_of_exec.append(0xFF)
    resolved_program_bytes.extend(end_of_exec)
    return bytes(resolved_program_bytes)


# package data and program into nisvc-ef executable binary image
def nisvc_ef_build(name:str,data:bytes,program:bytes):
    with open(name, "wb") as f:
        # Write signature
        f.write(b"NISVC-EF")

        f.write((len(program)).to_bytes(8, byteorder='little'))
        f.write((len(data)).to_bytes(8, byteorder='little'))

        f.write(program)
        f.write(data)

    print(f"{GREEN} assembled binary {name} {RESET}")

def assemble(data_source:list[str],program_source:list[str]) -> tuple[bytes,bytes]:

    assembled_data,data_labels = parse_data_section(data_source)
    print(f"data labels {data_labels}")

    intermediate_program = assemble_program(program_source)
    print(f"intermediate :\n{intermediate_program}")

    resolved_label_intermediate = resolve_labels(program_source,data_labels,intermediate_program)
    print(f"resolved intermediate :\n{resolved_label_intermediate}")
    program = expand_bytes(resolved_label_intermediate)

    return (assembled_data,program)


def load_section(section:list[str]) -> tuple[list[str],int]: #section lines, last line read
    last_char_open_check = section[0][-1] # last char
    if last_char_open_check != OPEN_SECTION:
        handle_error("Format",f"section passed was not opened properly, expected [ {OPEN_SECTION} ] read [ {last_char_open_check} ]")
    in_section = True
    # print("in section")
    section_buffer : list[str] = []
    lines_read = 1

    first_iteration = True
    while in_section:
        line = section[lines_read]
        if first_iteration:
            # print("line: ",line)
            first_iteration = False
            line = line[0:]
            # print("0: ",line)
            if not line:
                #empty
                continue

        last_char_closed_check = line[-1] # last char
        if last_char_closed_check == CLOSE_SECTION: # found end
            in_section = False
            # print("exited section")
            continue
        section_buffer.append(line)

        lines_read+=1
    return (section_buffer,lines_read)

# only slightly less fucked but still VERYYY skuffed
def parse_initial(source:str) -> tuple[list[str],list[str]]:
    sections : dict[str,list[str]] = {}
    cleaned_source = clean_source(source)
    section_name,_,_ = cleaned_source[0].partition(" ")
    if section_name != "program" and section_name != "data":
        handle_error("Format",f"invalid section name [ {section_name} ]")
    sections[section_name],last_line = load_section(cleaned_source)

    second_source = cleaned_source[last_line+1:]

    section2_name,_,_ = second_source[0].partition(" ")
    if section2_name != "program" and section2_name != "data":
        handle_error("Format",f"invalid section name [ {section2_name} ]")

    # print("program source : ",second_source)
    sections[section2_name],_ = load_section(second_source)

    # print(f"data:\n\n{sections["data"]}\n\nprogram:\n\n{sections["program"]}\n")
    return sections["data"],sections["program"]

def main():
    if len(sys.argv) < 2:
        handle_error("Argument","missing input file... aborting")

    if len(sys.argv) < 3:
        print(f"{YELLOW} Assembly Argument Warning ::{RESET} output file not specified, defaulting to nisvc.out")
        out_file : str = "nisvc.out"
    else:
        out_file : str =  sys.argv[2]

    try:
        in_file : str = open(sys.argv[1]).read() # currently expects full layout, just does not parse data section
    except FileNotFoundError as e:
        handle_error("Argument",f"{e}")
    except IsADirectoryError as e:
        handle_error("Argument",f"{e}")

    if os.path.exists(out_file):
        if os.path.isdir(out_file):
            handle_error("Arugument",f"{out_file} exists and is a directory.\n{sys.argv[0]} will only overwrite regular files")

    data,program = parse_initial(in_file)
    asm_data,asm_program = assemble(data,program)
    nisvc_ef_build(out_file,asm_data,asm_program)
main()

# special_ptrs : dict[str,int] = {
#     ASSEMBLY_POINTER:0,
# }

# labels = {"!label":16,"!louis":12,"!spoink":1234}
# labels.update(special_ptrs)

# result = evaluate_literal_definition(sys.argv[1],labels)
# print(result)
# # eval_expression((1,"+",2))
